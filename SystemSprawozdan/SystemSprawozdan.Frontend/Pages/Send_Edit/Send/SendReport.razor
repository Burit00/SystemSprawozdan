@page "/send/{ReportTopicId}"
@using System.Net.Http.Headers;
@using Newtonsoft.Json
@inject IAppHttpClient AppHttpClient

<head>
    <PageTitle>Wyślij sprawozdanie</PageTitle>
    <style>
        input{
        cursor: pointer;
        transition: background-color 400ms;
        border: dashed var(--primary-color) 4px;
        border-radius: 46px;
        width: 400px;
        height: 400px;
        background-image: url("Icons/Send_edit/Send/download-icon.svg");
        background-size: 25%;
        background-position: center;
        background-repeat: no-repeat;
        }
        
        input:hover{
        background-color: rgba(64,153,229,0.49);
        }
        
        input::file-selector-button{
        opacity: 0;
        }
        
        input[type="file"]{
        width: 100%;
        padding-left: 20px;
        padding-top: 20px;
        color: transparent;
        }
    </style>
</head>

<p style="display: flex; justify-content: center; padding-bottom: 24px; margin-top: -38px; font-size: 26px;">@TopicName</p>
<div class="main-container">
    <div class="left-column">
        <div class="wrapper">
            <span class="file-upload-text">Umieść pliki</span>    
            <InputFile multiple OnChange="OnInputFileChange" placeholder="Bagno taktyczne"></InputFile>
        </div>
        
        @if (_fileNames.Count > 0)
        {
            <ul class="files-list">
                @foreach (var fileName in _fileNames)
                {
                    <li>
                        <img src="Icons/Send_edit/Send/file-icon.svg" alt="File icon."/>
                        @fileName
                    </li>
                }
            </ul>
        }
    </div>
    
    <div class="right-column">
        <p style="font-size: 20px">Termin oddania: @Deadline</p>
        <MatTextField TValue="string" @bind-Value="Note" Label="Komentarz dla prowadzącego:" Outlined="true" TextArea="true" Style="height: 50%; margin-bottom: 20px;"/>
        <div class="radio-buttons__and-description">
            <p class="radio-button-description">Sposób oddania:</p>
                    <div class="radio-buttons" style="margin-bottom: 20px">
                        <MatRadioGroup @bind-Value="@IsIndividual" TValue="string" Style="display: flex">
                            <MatRadioButton Value="@("true")" TValue="string">Indywidualnie</MatRadioButton>
                            <MatRadioButton Value="@("false")" TValue="string">Grupowo</MatRadioButton>
                        </MatRadioGroup>
                    </div>
        </div>
        
            
            <MatButton OnClick="@(() => sendReport())" Label="Prześlij" Unelevated="true" Class="send-button" Style="height: 12%"></MatButton>
    </div>

</div>
    



@code {

    [Parameter]
    public string ReportTopicId { get; set; }
    public string IsIndividual { get; set; } = "true";
    public string Note { get; set; } = string.Empty;
    public string Token { get; set; }
    public Uri endpointUri { get; set; }
    public string Deadline { get; set; }
    public string TopicName { get; set; }
    
    private readonly int _maxAllowedFiles = 100;
    private readonly long _maxFileSize = 5368709120; // 5 Gigabytes
    private List<string> _fileNames = new();
    MultipartFormDataContent multipartFormContent = new MultipartFormDataContent();

    public async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles(_maxAllowedFiles))
        {
            var fileContent = new StreamContent(file.OpenReadStream(_maxFileSize));
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);

            _fileNames.Add(file.Name);
            multipartFormContent.Add(
                content: fileContent,
                name: "\"files\"",
                fileName: file.Name);
        }
    }

    public async void sendReport()
    {
        multipartFormContent.Add(new StringContent(ReportTopicId.ToString()), name: "ReportTopicId");
        multipartFormContent.Add(new StringContent(Note), name: "Note");
        multipartFormContent.Add(new StringContent(IsIndividual), name: "IsIndividual");
        var url = "https://localhost:7184/api/StudentReport";
        
        using var client = new HttpClient();
        client.DefaultRequestHeaders.Add("Authorization", "Bearer " + Token);
        var response = await client.PostAsync(url, multipartFormContent);
        response.EnsureSuccessStatusCode();
    }
    

    protected override async Task OnInitializedAsync()
    {
        var loginData = new LoginUserDto()
        {
            Login = "169571",
            Password = "Hasło123"
        };

        Token = await AppHttpClient.Post("Account/login", loginData);
        endpointUri =  new Uri($"https://localhost:7184/api/ReportTopic/{ReportTopicId}");
        using (var client = new HttpClient())
        {
            HttpResponseMessage response = await client.GetAsync(endpointUri);
            string responseBody = await response.Content.ReadAsStringAsync();
            ReportTopicGetDto deserializedReportTopicDto = JsonConvert.DeserializeObject<ReportTopicGetDto>(responseBody);
            var dateTime = deserializedReportTopicDto.Deadline;
            Deadline = dateTime.ToString("g");
            TopicName = deserializedReportTopicDto.Name;
        }
    }

}