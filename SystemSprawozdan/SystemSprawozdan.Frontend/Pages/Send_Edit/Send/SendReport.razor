@page "/send/{ReportTopicId}"
@using System.Net.Http.Headers;
@using Newtonsoft.Json
@inject IAppHttpClient AppHttpClient
@inject HttpClient Http
<head>
    <PageTitle>Wyślij sprawozdanie</PageTitle>
    <style>
        .main-container{
            display: flex;
            flex-direction: row;
            justify-content: space-evenly;
            align-content: flex-start;
            height: 100%;
            padding-bottom: 6vh;
        }
        .file-input{
            cursor: pointer;
            transition: background-color 400ms;
            border: dashed var(--primary-color) 4px;
            border-radius: 46px;
            background-image: url("Icons/Send_edit/Send/download-icon.svg");
            background-size: 25%;
            background-position: center;
            background-repeat: no-repeat;
        }
        
        .file-input:hover{
            background-color: rgba(64,153,229,0.49);
        }
        
        input::file-selector-button{
            opacity: 0;
        }
        
        input[type="file"]{
            width: 100%;
            height: 75%;
            color: transparent;
            margin-bottom: 24px;
        }
    </style>
</head>

<span class="report-topic-name">@TopicName</span>
<div class="main-container">
    <div class="left-column">
        <span class="file-upload-text">Umieść pliki</span>    
        <InputFile class="file-input"multiple OnChange="OnInputFileChange"></InputFile>
        @*@for (int i = 0; i < numberOfInputFiles; i++)
        {
            <InputFile @key="i" OnChange="OnInputFileChange" multiple style="@GetInputFileStyle(i)"></InputFile>
        }*@
        <div class="files-list">
            @if (_files.Count > 0)
            {
                <FilesList Files="_files" RemoveFile="RemoveFileFromList"></FilesList>
            }
            
        </div>
    </div>
    
    <div class="right-column">
        <p class="deadline">Termin oddania: @Deadline</p>
        <MatTextField TValue="string" @bind-Value="Note" Label="Komentarz dla prowadzącego:" Outlined="true" TextArea="true" Style="height: 50%; margin-bottom: 20px;"/>
        <div class="radio-buttons__and-description">
            <p class="radio-button-description">Sposób oddania:</p>
            <div class="radio-buttons" style="margin-bottom: 20px">
                <MatRadioGroup @bind-Value="@IsIndividual" TValue="string" Style="display: flex">
                    <MatRadioButton Value="@("true")" TValue="string">Indywidualnie</MatRadioButton>
                    <MatRadioButton Value="@("false")" TValue="string">Grupowo</MatRadioButton>
                </MatRadioGroup>
            </div>
        </div>

        <MatButton OnClick="@(() => sendReport())" Label="Prześlij" Unelevated="true" Class="send-button" Style="height: 12%"></MatButton>
    </div>

</div>
    



@code {

    [Parameter]
    public string ReportTopicId { get; set; }
    
    public string IsIndividual { get; set; } = "true";
    public string Note { get; set; } = string.Empty;
    public string Token { get; set; }
    public Uri endpointUri { get; set; }
    public string Deadline { get; set; }
    public string TopicName { get; set; }


    private readonly int _maxAllowedFiles = 100;
    private readonly long _maxFileSize = 5368709120; // 5 Gigabytes
    private List<IBrowserFile> _files = new();
    MultipartFormDataContent studentReportMultipartFormContent = new();
    MultipartFormDataContent filesMultipartFormDataContent = new();

    public async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles(_maxAllowedFiles))
        {
            _files.Add(file);
            @*var fileContent = new StreamContent(file.OpenReadStream(_maxFileSize));
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);

            filesMultipartFormDataContent.Add(
                content: fileContent,
                name: "\"files\"",
                fileName: file.Name);*@
            
        }
    }
    
    
    public async void sendReport()
    {
        studentReportMultipartFormContent.Add(new StringContent(ReportTopicId.ToString()), name: "ReportTopicId");
        studentReportMultipartFormContent.Add(new StringContent(Note), name: "Note");
        studentReportMultipartFormContent.Add(new StringContent(IsIndividual), name: "IsIndividual");
        var studentReportUrl = "https://localhost:7184/api/StudentReport";

        using var client = new HttpClient();
        client.DefaultRequestHeaders.Add("Authorization", "Bearer " + Token);
        var response = await client.PostAsync(studentReportUrl, studentReportMultipartFormContent);
        response.EnsureSuccessStatusCode();

        if (_files is null)
        {
            return;
        }
        var sendFilesUrl = "https://localhost:7184/api/StudentReport/files";
        foreach (var file in _files)
        {
            var fileContent = new StreamContent(file.OpenReadStream(_maxFileSize));
            var fileContentType = file.ContentType;
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(fileContentType);

            filesMultipartFormDataContent.Add(
                content: fileContent,
                name: "\"files\"",
                fileName: file.Name);
        }
        var filesResponse = await client.PostAsync(sendFilesUrl, filesMultipartFormDataContent);
        filesResponse.EnsureSuccessStatusCode();
    }
    
    
    protected override async Task OnInitializedAsync()
    {
        var loginData = new LoginUserDto()
        {
            Login = "169571",
            Password = "Hasło123"
        };

        Token = await AppHttpClient.Post("Account/login", loginData);
        endpointUri =  new Uri($"https://localhost:7184/api/ReportTopic/{ReportTopicId}");
        using (var client = new HttpClient())
        {
            HttpResponseMessage response = await client.GetAsync(endpointUri);
            string responseBody = await response.Content.ReadAsStringAsync();
            ReportTopicGetDto deserializedReportTopicDto = JsonConvert.DeserializeObject<ReportTopicGetDto>(responseBody);
            var dateTime = deserializedReportTopicDto.Deadline;
            Deadline = dateTime.ToString("g");
            TopicName = deserializedReportTopicDto.Name;
        }
    }

    public void RemoveFileFromList(string name)
    {
        var fileObjectToRemove = _files.Find(f => f.Name == name);
        Console.WriteLine(fileObjectToRemove);
        Console.WriteLine(fileObjectToRemove.ContentType);
        _files.Remove(fileObjectToRemove);
    }

    public void TestPrint(string val)
    {
        Console.WriteLine(val);
    }

}